package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"time"

	rbtmqlib "github.com/GAFIKART/rbtmq/lib"
)

// Message –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
type Message struct {
	ID      string    `json:"id"`
	Content string    `json:"content"`
	Time    time.Time `json:"time"`
}

// RequestMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
type RequestMessage struct {
	Question string `json:"question"`
	ID       string `json:"id"`
}

// ResponseMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
type ResponseMessage struct {
	Answer string `json:"answer"`
	ID     string `json:"id"`
}

// UserData –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
type UserData struct {
	UserID   int    `json:"user_id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Active   bool   `json:"active"`
}

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–∏–±–∫–∏–µ —Å–ø–æ—Å–æ–±—ã —Ä–∞–±–æ—Ç—ã —Å JSON:
// 1. msg.GetBodyAsString() - –ø–æ–ª—É—á–∞–µ—Ç–µ JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
// 2. msg.GetBodyAsBytes() - –ø–æ–ª—É—á–∞–µ—Ç–µ JSON –∫–∞–∫ –±–∞–π—Ç—ã
// 3. msg.UnmarshalBody(&struct) - –ø–∞—Ä—Å–∏—Ç–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
// 4. json.Unmarshal(msg.GetBodyAsBytes(), &struct) - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±—É—é JSON –±–∏–±–ª–∏–æ—Ç–µ–∫—É

func main() {
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è RabbitMQ
	config := rbtmqlib.RabbitMQConfig{
		ConnectParams: rbtmqlib.ConnectParams{
			Username: "guest",
			Password: "guest",
			Host:     "localhost",
			Port:     5672,
		},
		RoutingKey: "test.messages",
	}

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä RabbitMQ
	rabbitmq, err := rbtmqlib.NewRabbitMQ(config)
	if err != nil {
		log.Fatalf("Failed to create RabbitMQ: %v", err)
	}
	defer rabbitmq.Shutdown(context.Background())

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
	if err := rabbitmq.StartConsuming(); err != nil {
		log.Fatalf("Failed to start consuming: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π
	messages := rabbitmq.GetMessages()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	go func() {
		for msg := range messages {
			// –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
			rawJSON := msg.GetBodyAsString()
			log.Printf("üì® Received raw JSON: %s", rawJSON)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º (–µ—Å—Ç—å –ª–∏ ReplyTo)
			if msg.OriginalMessage.ReplyTo != "" {
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
				var request RequestMessage
				if err := msg.UnmarshalBody(&request); err != nil {
					log.Printf("‚ùå Failed to unmarshal request: %v", err)
					msg.Nack(true)
					continue
				}

				log.Printf("ü§î Received request: %s", request.Question)

				// –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
				response := ResponseMessage{
					Answer: fmt.Sprintf("Answer to: %s", request.Question),
					ID:     request.ID,
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
				if err := rabbitmq.Respond(msg, response); err != nil {
					log.Printf("‚ùå Failed to send response: %v", err)
				} else {
					log.Printf("‚úÖ Sent response for request ID: %s", request.ID)
				}

				msg.Ack()
			} else {
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
				processMessage(msg)
			}
		}
	}()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	sendTestMessages(rabbitmq)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º request-response –ø–∞—Ç—Ç–µ—Ä–Ω
	testRequestResponse(rabbitmq)

	// –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	time.Sleep(5 * time.Second)
	log.Println("üéâ Example completed")
}

// processMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
func processMessage(msg *rbtmqlib.DeliveryMessage) {
	log.Println("üîÑ Processing message...")

	// –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	var message Message
	if err := msg.UnmarshalBody(&message); err == nil {
		log.Printf("‚úÖ Parsed as Message: ID=%s, Content=%s, Time=%v",
			message.ID, message.Content, message.Time)
		msg.Ack()
		return
	}

	// –°–ø–æ—Å–æ–± 2: –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
	var userData UserData
	if err := msg.UnmarshalBody(&userData); err == nil {
		log.Printf("‚úÖ Parsed as UserData: ID=%d, Username=%s, Email=%s, Active=%v",
			userData.UserID, userData.Username, userData.Email, userData.Active)
		msg.Ack()
		return
	}

	// –°–ø–æ—Å–æ–± 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É JSON –Ω–∞–ø—Ä—è–º—É—é
	var customMessage Message
	if err := json.Unmarshal(msg.GetBodyAsBytes(), &customMessage); err == nil {
		log.Printf("‚úÖ Parsed with standard library: ID=%s, Content=%s",
			customMessage.ID, customMessage.Content)
		msg.Ack()
		return
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º
	log.Printf("‚ùå Failed to parse message with any method")
	log.Printf("üìÑ Raw message: %s", msg.GetBodyAsString())
	msg.Nack(true) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
}

// sendTestMessages –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func sendTestMessages(rabbitmq *rbtmqlib.RabbitMQ) {
	log.Println("üì§ Sending test messages...")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	for i := 1; i <= 2; i++ {
		message := Message{
			ID:      fmt.Sprintf("msg-%d", i),
			Content: fmt.Sprintf("Test message %d", i),
			Time:    time.Now(),
		}

		if err := rabbitmq.Publish(message); err != nil {
			log.Printf("‚ùå Failed to publish message %d: %v", i, err)
		} else {
			log.Printf("‚úÖ Published Message %d", i)
		}

		time.Sleep(500 * time.Millisecond)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
	for i := 1; i <= 2; i++ {
		userData := UserData{
			UserID:   i,
			Username: fmt.Sprintf("user%d", i),
			Email:    fmt.Sprintf("user%d@example.com", i),
			Active:   i%2 == 0,
		}

		if err := rabbitmq.Publish(userData); err != nil {
			log.Printf("‚ùå Failed to publish user data %d: %v", i, err)
		} else {
			log.Printf("‚úÖ Published UserData %d", i)
		}

		time.Sleep(500 * time.Millisecond)
	}
}

// testRequestResponse –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç request-response –ø–∞—Ç—Ç–µ—Ä–Ω
func testRequestResponse(rabbitmq *rbtmqlib.RabbitMQ) {
	log.Println("üîÑ Testing Request-Response Pattern...")

	for i := 1; i <= 2; i++ {
		request := RequestMessage{
			Question: fmt.Sprintf("What is %d + %d?", i, i),
			ID:       fmt.Sprintf("req-%d", i),
		}

		log.Printf("üì§ Sending request: %s", request.Question)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç (—Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥)
		responseBody, err := rabbitmq.PublishWithResponse(request, 5*time.Second)
		if err != nil {
			log.Printf("‚ùå Failed to get response for request %d: %v", i, err)
		} else {
			log.Printf("üì• Received response: %s", string(responseBody))
		}

		time.Sleep(1 * time.Second)
	}
}
